#!/usr/bin/env python3
from PyQt5 import QtCore, QtGui, uic, QtWidgets

from PyQt5.QtGui import QPainter, QPen, QBrush

import subprocess
import os
import sys
import time

this_file_directory = os.path.dirname(os.path.realpath(__file__))
fissure_directory = os.path.abspath(os.path.join(this_file_directory, os.pardir))

form_class = uic.loadUiType(fissure_directory + "/UI/install.ui")[0]
form_class2 = uic.loadUiType(fissure_directory + "/UI/install2.ui")[0]

# Program Format: ('name','command',checked/default, parent_category)

larger_categories = ['Minimum Install','Hardware','Out-of-Tree Modules']



########################################################################
############################ Ubuntu 20.04.4 ############################
########################################################################

programs_ubuntu20_04_4 = []

# Misc. Dependencies
programs_ubuntu20_04_4.append(('Misc. Dependencies',
"""sudo apt-get -y update
#sudo apt-get -y install cmake
#sudo apt-get install -y python-setuptools python-dev build-essential
#sudo apt-get install -y curl
#curl https://bootstrap.pypa.io./pip/2.7/get-pip.py | sudo python2  # Installs pip 20.3.4
#sudo apt-get install -y python3-pip
#sudo python3 -m pip install cmake --upgrade
#sudo apt install -y python3-testresources
#sudo python3 -m pip install --upgrade setuptools
#sudo python3 -m pip install --upgrade virtualenv
#sudo python3 -m pip install matplotlib
#sudo python3 -m pip install PyYAML==5.1
#sudo python3 -m pip install pyyaml
#wget http://archive.ubuntu.com/ubuntu/pool/universe/p/python-scipy/python-scipy_0.19.1-2ubuntu1_amd64.deb
#sudo apt-get install -y ./python-scipy_0.19.1-2ubuntu1_amd64.deb
#rm python-scipy_0.19.1-2ubuntu1_amd64.deb
#sudo apt-get install -y gedit
#sudo apt-get install -y software-properties-common #python-software-properties # does Python3
#sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get -y update
#sudo apt-get install -y git 
sudo apt-get install -y libcanberra-gtk-module
sudo python3 -m pip install bitarray
sudo apt install net-tools
#sudo python3 -m pip install crcmod
sudo python3 -m pip install pycrypto
sudo apt-get install -y python-tk
#sudo python3 -m pip install pyzmq
#sudo apt-get install -y libosmocore-dev
#sudo apt-get install -y liborc-0.4-dev
sudo apt-get install -y expect
#sudo add-apt-repository --y ppa:wireshark-dev/stable  # Latest Wireshark
sudo apt-get update
sudo python3 -m pip install pyshark
#sudo apt-get install -y tshark  # Installs Wireshark, launching without sudo permissions and copying FISSURE dissectors happens later
sudo python3 -m pip install pypcapfile
sudo python2 -m pip install pypcapfile
#sudo python2 -m pip install netaddr
#sudo python3 -m pip install psutil
#sudo python3 -m pip install pyserial
sudo apt-get install -y gpsd-clients python-gi-cairo
#sudo python3 -m pip install pandas
sudo apt-get install -y dsniff
sudo cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d  # removes sudo apt-get update warnings
sudo apt-get -y install ncurses-term
sudo ln -s /usr/src/falcon/build/src/gui/gui /usr/bin/FalconGUI

. ~/.bashrc
""",True,'Minimum Install'))

# fissure Command 
programs_ubuntu20_04_4.append(('fissure Command',
"""echo "[Desktop Entry]\nStartupWMClass=dashboard\nName=FISSURE\nTerminal=false\nType=Application\nCategories=Qt;Science;DataVisualization;Electricity;HamRadio;" > """ + fissure_directory + """/Installer/fissure.desktop
echo "Exec=""" + fissure_directory + """/dashboard" >> """ + fissure_directory + """/Installer/fissure.desktop
echo "Icon=""" + fissure_directory + """/Icons/logo_f.png" >> """ + fissure_directory + """/Installer/fissure.desktop
sudo cp """ + fissure_directory + """/Installer/fissure.desktop /usr/share/applications/
########## Verify ##########
ls /usr/src/fissure
""",True,'Minimum Install'))

# Wireshark
programs_ubuntu20_04_4.append(('Wireshark',
"""sudo add-apt-repository --y ppa:wireshark-dev/stable  # Gets installed with Misc. Dependencies (tshark), ESP32 Bluetooth Classic Sniffer
sudo apt-get update
sudo apt install -y wireshark wireshark-dev
sudo groupadd wireshark
sudo usermod -a -G wireshark $USER
sudo chgrp wireshark /usr/bin/dumpcap
sudo chmod o-rx /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap
sudo getcap /usr/bin/dumpcap
mkdir -p ~/.config/wireshark/plugins
cp -a """ + fissure_directory + """/Dissectors/. ~/.config/wireshark/plugins
########## Verify ##########
wireshark --help
""",True,'Minimum Install'))

# 8812au Driver
programs_ubuntu20_04_4.append(('8812au Driver',
"""sudo apt-get -y install dkms
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/aircrack-ng/rtl8812au/
cd ~/Installed_by_FISSURE/rtl8812au
sudo make dkms_install
""",True,'Hardware'))

# fl2k
programs_ubuntu20_04_4.append(('fl2k',
"""mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone git://git.osmocom.org/osmo-fl2k.git
cd osmo-fl2k
mkdir build
cd build 
cmake ../ -DINSTALL_UDEV_RULES=ON
make -j 3
sudo make install
sudo ldconfig
sudo udevadm control -R
sudo udevadm trigger
########## Verify ##########
ls /usr/local/bin/fl2k_test
""",True,'Hardware'))

# Proxmark3
programs_ubuntu20_04_4.append(('Proxmark3',
"""sudo apt-get install -y p7zip git build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev perl pkg-config wget libncurses5-dev gcc-arm-none-eabi libreadline-dev libpcsclite-dev gcc-arm-none-eabi
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/Proxmark/proxmark3.git
cd proxmark3
make clean && make all
########## Verify ##########
ls ~/Installed_by_FISSURE/proxmark3/client/proxmark3
""",True,'Hardware'))

# gr-acars
programs_ubuntu20_04_4.append(('gr-acars',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-acars/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import acars"
""",True,'Out-of-Tree Modules'))

# gr-ainfosec
programs_ubuntu20_04_4.append(('gr-ainfosec',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ainfosec/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import ainfosec"
""",True,'Out-of-Tree Modules'))

# gr-bluetooth-maint-3.8
programs_ubuntu20_04_4.append(('gr-bluetooth-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/libbtbb-master/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-bluetooth-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
sudo ln -s /usr/local/lib/python3.8/site-packages/gr_bluetooth/ /usr/local/lib/python3.8/dist-packages/
sudo ln -s /usr/local/lib/python3.8/site-packages/pcapdump/ /usr/local/lib/python3.8/dist-packages/
########## Verify ##########
ls /usr/local/bin/btrx
""",True,'Out-of-Tree Modules'))

# gr-clapper_plus-maint-3.8
programs_ubuntu20_04_4.append(('gr-clapper_plus-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-clapper_plus-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import clapper_plus"
""",True,'Out-of-Tree Modules'))

# gr-fuzzer
programs_ubuntu20_04_4.append(('gr-fuzzer',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-fuzzer/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import fuzzer"
""",True,'Out-of-Tree Modules'))

# gr-garage_door-maint-3.8
programs_ubuntu20_04_4.append(('gr-garage_door-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-garage_door-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import garage_door"
""",True,'Out-of-Tree Modules'))

# gr-ieee802-15-4-maint-3.8
programs_ubuntu20_04_4.append(('gr-ieee802-15-4-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
#sudo make install
#sudo ldconfig
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/examples/ieee802_15_4_CSS_PHY.grc
grcc """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-ieee802-15-4-maint-3.8/examples/ieee802_15_4_OQPSK_PHY.grc
########## Verify ##########
python3 -c "import ieee802_15_4"
""",True,'Out-of-Tree Modules'))

# gr-j2497-maint-3.8
programs_ubuntu20_04_4.append(('gr-j2497-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-j2497-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import j2497"
""",True,'Out-of-Tree Modules'))

# gr-tpms_poore-maint-3.8
programs_ubuntu20_04_4.append(('gr-tpms_poore-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-tpms_poore-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import tpms_poore"
""",True,'Out-of-Tree Modules'))

# gr-X10-maint-3.8
programs_ubuntu20_04_4.append(('gr-X10-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-X10-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import X10"
""",True,'Out-of-Tree Modules'))

# gr-zwave_poore-maint-3.8
programs_ubuntu20_04_4.append(('gr-zwave_poore-maint-3.8',
"""cd """ + fissure_directory + """/Custom_Blocks/maint-3.8/gr-zwave_poore-maint-3.8/
sudo rm -Rf build
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig
########## Verify ##########
python3 -c "import zwave_poore"
""",True,'Out-of-Tree Modules'))

# Dump1090
programs_ubuntu20_04_4.append(('Dump1090',
"""sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y librtlsdr-dev
mkdir -p ~/Installed_by_FISSURE
cp -R """ + fissure_directory + """/Tools/dump1090/ ~/Installed_by_FISSURE/
cd ~/Installed_by_FISSURE/dump1090/
make
########## Verify ##########
~/Installed_by_FISSURE/dump1090/dump1090 --help
""",True,None))

# srsRAN/srsLTE
programs_ubuntu20_04_4.append(('srsRAN',
"""sudo apt-get install -y build-essential cmake net-tools libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev
sudo apt-get install -y libboost-system-dev libboost-test-dev libboost-thread-dev libqwt-qt5-dev qtbase5-dev  # srsGUI
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/srsLTE/srsGUI.git
cd srsGUI
mkdir build
cd build 
cmake ..
make
#sudo make install
cd ~/Installed_by_FISSURE
git clone https://github.com/srsRAN/srsRAN.git
cp """ + fissure_directory + """/Tools/IMSI-Catcher_4G/cell_search.c ~/Installed_by_FISSURE/srsRAN/lib/examples/  # IMSI-Catcher 4G
cd srsRAN/
mkdir build
cd build
cmake ..
make
#sudo make install
#sudo ldconfig
#sudo srsran_install_configs.sh user  # user or service, not username
cd ../..
mkdir -p ~/.config/srsran
sudo cp -f """ + fissure_directory + """/Tools/srsRAN_configs/* ~/.config/srsran/
sudo chown -R $USER:$USER ~/.config/srsran     # IMSI-Catcher 4G
sudo apt-get install -y fortune cowsay lolcat  # IMSI-Catcher 4G
# cd srsRAN/srsepc
# interface=$(route | awk '/default/ {print $0}' | awk 'END {print $(NF)}')
# sudo ./srsepc_if_masq.sh "$interface"
# gnome-terminal --tab --title="srsEPC" -- /bin/sh -c 'sudo srsepc; $SHELL' 
# gnome-terminal --tab --title="srsENB" -- /bin/sh -c 'sudo srsenb; $SHELL'
########## Verify ##########
srsenb --help
""",True,None))

# LTE-ciphercheck
programs_ubuntu20_04_4.append(('LTE-ciphercheck',
"""sudo apt install -y git cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libuhd-dev libpcsclite-dev pcsc-tools pcscd
mkdir -p ~/Installed_by_FISSURE
cd ~/Installed_by_FISSURE
git clone https://github.com/mrlnc/LTE-ciphercheck
cd LTE-ciphercheck
mkdir build 
cd build
cmake ..
make srsue
sudo ldconfig
cp """ + fissure_directory + """/Tools/LTE-ciphercheck/ciphercheck.conf ../srsue/ciphercheck.conf 
""",True,None))

########################################################################
       


class InstallDialog2(QtWidgets.QDialog, form_class2):
    def __init__(self,programs):
        """ Software Selection Dialog
        """
        QtWidgets.QDialog.__init__(self)
        self.setupUi(self)
        
        # Prevent Resizing/Maximizing
        self.setFixedSize(820, 600)     

        # Hide Progress Bar
        self.progressBar1.hide()   
        
        # Do SIGNAL/Slots Connections
        self._connectSlots()  
        
        # Create Categories
        for c in larger_categories:
            parent = QtWidgets.QTreeWidgetItem(self.treeWidget_software)
            parent.setText(0,c)
            parent.setFlags(parent.flags() | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsUserCheckable)
            parent.setCheckState(0, QtCore.Qt.Checked)
        
        # Load Checkboxes in Table
        self.programs = programs
        for row in range(0,len(programs)):
            # Subcategories
            if programs[row][3] != None:
                parent_name = programs[row][3]
                
                # Iterate the Tree
                iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
                while iterator.value():
                    item = iterator.value()
                    if item.text(0) == parent_name:
                        child = QtWidgets.QTreeWidgetItem(item)
                        child.setFlags(child.flags() | QtCore.Qt.ItemIsUserCheckable)
                        child.setText(0, programs[row][0])
                        if programs[row][2] == True:
                            child.setCheckState(0, QtCore.Qt.Checked)
                        else:
                            child.setCheckState(0, QtCore.Qt.Unchecked)
                        break
                    iterator+=1      
            
            # No Category
            else:            
                parent = QtWidgets.QTreeWidgetItem(self.treeWidget_software)
                parent.setText(0,programs[row][0])
                parent.setFlags(parent.flags() | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsUserCheckable)
                if programs[row][2] == True:
                    parent.setCheckState(0, QtCore.Qt.Checked)
                else:
                    parent.setCheckState(0, QtCore.Qt.Unchecked)
            
    def _connectSlots(self):
        """ Contains the connect functions for all the signals and slots
        """   
        # Push Buttons
        self.pushButton_ok.clicked.connect(self._slotOK_Clicked)
        self.pushButton_cancel.clicked.connect(self._slotCancelClicked)
        self.pushButton_deselect.clicked.connect(self._slotDeselectClicked)
        self.pushButton_default.clicked.connect(self._slotDefaultClicked)
        
        # Tables
        self.treeWidget_software.clicked.connect(self._slotTableItemClicked)
        
    def _slotOK_Clicked(self):
        """ Install the software.
        """      
        # Find Number of Checked Items and Store Names (prevents checking after starting the install)
        get_checked_items = 0
        iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
        self.checked_items = []
        while iterator.value():
            item = iterator.value()
            if item.checkState(0) == 2:    
                # Ignore Categories
                if item.text(0) not in larger_categories:       
                    get_checked_items = get_checked_items + 1
                    self.checked_items.append(item.text(0))     
            iterator+=1   
            
        # Reset the Colors
        iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()
            item.setForeground(0,QtGui.QColor('Black'))
            iterator+=1   
            
        # Show Progress Bar
        self.progressBar1.show()      
        self.progressBar1.setMaximum(get_checked_items+1)
        QtWidgets.QApplication.processEvents()
        self.pushButton_ok.setEnabled(False)

        # Iterate the Checked Items
        self.checked_index = 0
        for n in range(0,len(self.checked_items)):            
            # Find the Install Code
            for p in range(0,len(self.programs)):
                if self.checked_items[n] == self.programs[p][0]:
                    self.loop = True
            
                    # Split Install Commands and Verifier Commands
                    install_command = self.programs[p][1].split("########## Verify ##########")
                    
                    # Verify Code Found
                    if len(install_command) == 2:
                        self.verify_code = install_command[1]
                    else:
                        self.verify_code = ""
                        
                    self.loadthread = MyThread(install_command[0], self)                        
                    self.loadthread.finished.connect(self.on_finished)
                    self.loadthread.start()
                                      
                    self.progressBar1.setValue(self.checked_index+1)
                    self.checked_index = self.checked_index + 1
                    
                    while self.loop == True:
                        QtWidgets.QApplication.processEvents()
                        time.sleep(0.1)

        # Finished
        self.progressBar1.setValue(self.checked_index+1)
        print("\nInstall Complete")
        time.sleep(2)
        self.progressBar1.hide()   
        self.pushButton_ok.setEnabled(True)
        #self.accept()

        
    @QtCore.pyqtSlot()
    def on_finished(self):
        """ Proceed to the next program.
        """
        # Verify
        if len(self.verify_code) > 0:
            iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
            while iterator.value():
                item = iterator.value()
                if item.text(0) == self.checked_items[self.checked_index-1]:
                    # Verify Success
                    try:
                        p1 = subprocess.check_call(self.verify_code, shell=True)
                        print("VERIFY SUCCESS")
                        item.setForeground(0,QtGui.QColor('Green'))
                        
                    # Verify Failure
                    except:
                        print("VERIFY FAILURE")
                        item.setForeground(0,QtGui.QColor('Red'))
                    break
                iterator+=1  
            
        
        self.loop = False
        
    def _slotCancelClicked(self):
        """ Close everything.
        """
        self.close()
        
    def _slotTableItemClicked(self, item):
        """ Update text edit box with command text when table row is clicked.
        """
        # Clicked Item
        try:
            current_item = self.treeWidget_software.currentItem().text(0)  # Deselect All and checking a box causes an error
        except:
            return  

        # Search Programs
        for p in range(0,len(self.programs)):
            if current_item == self.programs[p][0]:
                self.plainTextEdit1.setPlainText(self.programs[p][1])
                break
        
    def _slotDeselectClicked(self):
        """ Unchecks all the checkboxes.
        """
        # Iterate the Tree
        iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()
            item.setCheckState(0, QtCore.Qt.Unchecked)
            iterator+=1  
            
    def _slotDefaultClicked(self):
        """ Checks the default checkboxes.
        """
        # Iterate the Tree
        iterator = QtWidgets.QTreeWidgetItemIterator(self.treeWidget_software)
        while iterator.value():
            item = iterator.value()            
            for p in range(0,len(self.programs)):
                if item.text(0) == self.programs[p][0]:
                    if self.programs[p][2] == True:
                        item.setCheckState(0, QtCore.Qt.Checked)
                    else:
                        item.setCheckState(0, QtCore.Qt.Unchecked)
                    break           
            iterator+=1  

        
        
class MyThread(QtCore.QThread):
    def __init__(self, n, parent=None):
        QtCore.QThread.__init__(self, parent)
        self.n = n

    def run(self):
        try:
            #print(self.n)
            p1 = subprocess.Popen(self.n, shell=True)
            p1.wait()
        except:
            print("FAILURE")
        


class InstallDialog1(QtWidgets.QDialog, form_class):
    def __init__(self):
        """ Operating System Dialog
        """
        QtWidgets.QDialog.__init__(self)
        self.setupUi(self)
        
        # Prevent Resizing/Maximizing
        self.setFixedSize(240, 245)         
        
        # Do SIGNAL/Slots Connections
        self._connectSlots()  
        
        # Detect Operating System
        process = subprocess.Popen('lsb_release -d', shell=True, stdout=subprocess.PIPE, encoding='utf8')
        stdout = process.communicate()[0]
        
        # Select Radio Button
        if "DragonOS Focal" in stdout:
            self.radioButton_ubuntu20_04_4.setChecked(True)            
        
        self.get_os = ""
        
    def _connectSlots(self):
        """ Contains the connect functions for all the signals and slots
        """   
        # Push Buttons
        self.pushButton_ok.clicked.connect(self._slotOK_Clicked)
        self.pushButton_cancel.clicked.connect(self._slotCancelClicked)
        
    def _slotOK_Clicked(self):
        """ Return to open the second install dialog.
        """        
        # Select Software for Operating System
        if self.radioButton_ubuntu20_04_4.isChecked():
            self.get_os = "Ubuntu 20.04.4"
                    
        self.accept()
        
    def _slotCancelClicked(self):
        """ Close everything.
        """
        self.close()


def main(argv):
    """ The start of everything.
    """   
    app = QtWidgets.QApplication(argv) 
    
    # Operating System Dialog
    install_dlg1 = InstallDialog1()
    install_dlg1.show() 
    
    # OK Clicked
    if install_dlg1.exec_() == QtWidgets.QDialog.Accepted:
        if install_dlg1.get_os == "Ubuntu 20.04.4":
            install_dlg2 = InstallDialog2(programs_ubuntu20_04_4)
        install_dlg2.show() 
        
        # Install Clicked
        if install_dlg2.exec_() == QtWidgets.QDialog.Accepted:
            pass
        #    print("Install Complete")
            
    sys.exit()
    
 
if __name__ == "__main__":
    main(sys.argv)
